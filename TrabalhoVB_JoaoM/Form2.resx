<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFZWVgBbW1sBGhoaGBUV
        FQkUFBQAAAAAADY2NgA7OzsAICAgEzAwMAkvLy8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAOzs7ADQ0NAE1NTUJPz8/AP///wAAAAAAAAAAAAAAAAAAAAAAV1dXAAAA
        AAAUFBQ4Dw8PZBISEhMNDQ0ACQkJABAQECgSEhJcJiYmCCUlJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnJycAHR0dCRoaGj0nJycCb29vAAAAAAAAAAAAAAAAAGFh
        YQAzMzMAKCgoFTExMQMQEBA3DQ0NeA8PDyEQEBAdDQ0NexERESENDQ0AaGhoAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8fHwAWFhYPERERWyUlJQNdXV0AAAAAAAAA
        AAAAAAAAZ2dnACoqKgETExNQFxcXDwoKCgAPDw8rCwsLiAoKCpsQEBAxCQkJAEhISAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGhoaABMTExIPDw9kJCQkA0tL
        SwAAAAAAAAAAAAAAAABQUFAAIyMjAg4ODmMTExMUFRUVABQUFA4LCwuFCgoKng0NDVUUFBQKEBAQAFBQ
        UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXFxcAERERFA4O
        DmcqKioDUVFRAAAAAAAAAAAAAAAAAFdXVwA4ODgBDg4OaBISEhcUFBQPDQ0Ncg0NDUgXFxcMDAwMXg4O
        DmgcHBwPGRkZAAAAAAAAAAAAAAAAAAAAAAA8PDwAPDw8AhkZGSMTExMoExMTGRYWFgwcHBwFMTExARcX
        FwASEhIXDg4Oay8vLwJVVVUAAAAAAAAAAAAAAAAAnZ2dAP///wANDQ1pEhISHRMTE0QRERE+KCgoBRUV
        FQsWFhYTExMTMxUVFSwTExMnFhYWJyMjIwsdHR0AAAAAADg4OABLS0sBGBgYJRISEkoQEBBcEBAQYBER
        EVwRERFXERERUQ4ODmMJCQmfDw8PRg8PDzsSEhI4EREROA8PDzwODg5DDQ0NUAgICKMMDAx0Dw8PaA4O
        DmkNDQ1uDQ0Nbg4ODmoODg5gEBAQUhISEkQWFhY0IyMjDR0dHQAAAAAAAAAAAAAAAAAAAAAAJycnACws
        LAEbGxsFFhYWDBQUFBUTExMeDg4OSAkJCaAPDw9EERERRRERETsRERE9Dw8PPg4ODkAPDw9JCwsLlw0N
        DVIQEBAhERERGRMTExAXFxcJISEhA0FBQQA4ODgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMTEwAQEBAeDAwMdTY2NgQUFBRJEhISKAkJCQAREREAEhISEBIS
        ElYPDw93Dg4ONAsLCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFRUVABISEh0NDQ1uAAAAABQUFBUPDw9rEBAQMxQU
        FAwNDQ1zEBAQOg0NDVUODg4/CQkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUFBQAEhISHg4ODmgAAAAAEBAQABMT
        ExMODg5xCgoKlg0NDVEAAAAADQ0NTA0NDUkHBwcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEREQAQEBAgDQ0NZQAA
        AAAUFBQAFxcXCAwMDHUKCgqnDw8PQAEBAQANDQ1CDQ0NUwYGBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw8PAA8P
        DyUNDQ1jAAAAABQUFAwNDQ1rDQ0NVRQUFBQNDQ1uDw8PSg8PDzwNDQ1bAwMDAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQABoaGhkRERE4EBAQKxAQEB8REREXExMTERQU
        FA0bGxsHDw8PMw0NDWYAAAAAFhYWPhAQEEQhISEDAAAAABYWFgoSEhJFExMTSQ0NDWRLS0sCHR0dBhcX
        FwgWFhYKFxcXCxQUFA0XFxcOICAgBg4ODgDAwMAAAAAAAAAAAAASEhIAGRkZExEREUEODg5aDQ0NZw0N
        DWsNDQ1uDQ0NcgwMDHUKCgqUCAgIsQsLC3wMDAx7CwsLcAwMDG8NDQ1uDAwMbgwMDG0LCwuICAgIsQwM
        DHYMDAxzDQ0NbQ4ODmkPDw9lEBAQXRMTE08fHx8fBwcHALy8vAAAAAAAAAAAAAAAAAAAAAAAKysrAAAA
        AAAPDw8tDAwMaQwMDGASEhIkGhoaCQ4ODj8NDQ1mDw8PGw4ODh4ODg4eDw8PHg8PDx4PDw8eDg4OHQ4O
        DjcMDAx+FBQUFxMTEx8ODg5JDg4OSBQUFBs1NTUCKSkpAVNTUwA/Pz8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAALCwsADw8PKgsLC4oMDAxHCwsLWQsLC4sQEBAjDw8PLw4ODlIHBwcAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAYGBgAEhISFg0NDW0gICAICwsLdwoKCncLCwtnCwsLhg8PDycLCwsAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAMDAwANDQ1dDg4OPgoKCgAGBgYADQ0NOQsLC3QSEhIvDw8PUAgICAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAB4eHgAUFBQPDg4OaxMTEx8LCwuBGhoaBwsLCwAODg41DAwMbAAAAABSUlIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABgYGAA0NDU4NDQ1UAAAAAAwMDAAPDw8tCwsLdxMTEyoQEBBNCQkJAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAJycnABcXFwoODg5pFxcXFAsLC4MODg4sBgYGAA8PDywNDQ1t////AFFR
        UQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASEhIAExMTEAwMDHQMDAxnDAwMYQwMDH8PDw8qFRUVGxMT
        E0YKCgoAAAAAAAAAAAAAAAAAAAAAAAAAAAA0NDQAGhoaBg8PD2UXFxcLDw8PKQsLC4AMDAxyDQ0Neg8P
        DysJCQkAbGxsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEdHRwAODg4AExMTCw4ODjINDQ07ERERFRUV
        FQAhISENISEhKhcXFwAAAAAAAAAAAAAAAAAAAAAAAAAAAE1NTQAhISEDEhISVRUVFQ0SEhIAEhISERAQ
        ECcTExMPAAAAAC8vLwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAASUlJAEtLSwFPT08FPz8/AAAAAAAAAAAAAAAAAAAAAAAAAAAAdHR0AC4uLgEfHx8RISEhAioq
        KgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////////////48//z/GP/8fgH//HxD//x8Qf/8fAD8BH
        4AHAAAAB+AAAP//Bh///yAf//8wn///MJ///yAf/wAiAB8AAAAf4AAAP8A/gH/MP4J/zD+Cf8A/gH/hP
        4j//z+P///////////////////////////8=
</value>
  </data>
</root>